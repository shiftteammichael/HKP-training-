/ Michael Hom Part B Day 2 Code


                                                      Linear: 
public class testing {
    //This main method is used to test the conditions of the algorithm
    public static void main(String[] args) {
    
        int[] testing = {5, 7, 7, 8, 8, 10};
        
        // target: 8
        int[] test1 = searchRange(testing, 8);
        System.out.println("Test1: "+test1[0]+ " , "+test1[1]);
        
        //target: 6
        int[] test2= searchRange(testing,6 );
        System.out.println("Test2: "+test2[0]+ " , "+test2[1]);
        
        //target:0
        int[] test3= searchRange(testing,0 );
        System.out.println("Test3: "+test3[0]+ " , "+test3[1]);

    }
    //This method is used to find first and last position of element in Sorted Array
    public static int[] searchRange(int[] nums, int target) {
    
        //start variable is used to find first position
        int start;
        
        // end variable used to find last position 
        int end;
        
        int[] regular = {-1, 1};
        
        // this condition checks if there is nothing in the array and returns the variable
        if (nums.length == 0) {
            return regular;
        }
        
        // this for loop checks for the first position the target is in.
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                start = i;
                regular[0] = start;
                break;

            }
        }
        
        // this for loop checks for the last position the target is in starting from the back 
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] == target) {
                end = i;
                regular[1] = end;
                break;
            }
        }

        return regular;
    }


}







                                                          O(logn) method:

// This main method are the tests
    public static void main (String[] args){
        int[] test={5,7,7,8,8,10};
       int[]a=binarySearch(test,8);
       int[] b=binarySearch(test,6);
       int[] c=binarySearch(test,0);
       System.out.println(a[0]+ ","+ a[1]);
       System.out.println(b[0]+ "," +b[1]);
       System.out.println(c[0]+"," +c[0]);
    }
    //This method is used to to test the two helper methods and is the binary search method of this algorithm
    public static int[] binarySearch(int[] nums, int target){
        int[] answer=new int[2];
        answer[0]=first(nums,target);
        answer[1]= last(nums,target);
        return answer;
    }

    // This method is used to find the first occurrence of the target number
    public static int first(int[]nums, int target) {

        // low number starts at the 0 index while high number starts at the last index
        int low = 0 , high = nums.length - 1, index = -1;

        // this while loop runs until the low is less than or equal to high
        while (low <= high) {

            // to find the mid value use this in order to prevent overflow
            int mid =low+ (high-low)/2;

            // this condition checks if the mid of the int array is the same as target
            // if the same, set index to mid
            if(nums[mid]==target){
                index=mid;
            }

            // this condition checks that if mid of int array is greater than or equal to target
            // set high to mid-1 to find left most (first occurrence)
            if(nums[mid]>=target){
                high=mid-1;
            }

            //if the other conditions are not true, set low to mid +1
            else{
                low=mid+1;
            }

        }
        return index;
    }
    // this helper method is used to find the last occurrence of the target number
    public static int last(int[]nums, int target) {

        // low number starts at the 0 index while high number starts at the last index
        int low = 0, high = nums.length - 1, index = -1;

        // this while loop runs until the low is less than or equal to high
        while (low <= high) {

            // to find the mid value use this in order to prevent overflow
            int mid = low + (high - low) / 2;

            // this condition checks if the mid of the int array is the same as target
            // if the same, set index to mid
            if (nums[mid] == target) {
                index = mid;

            }
            // this condition checks that if mid of int array is less than or equal to target
            // set low to mid+1 to find right most (last occurrence)
            if (nums[mid] <= target) {
                low = mid + 1;
            }

            //if the other conditions are not true, set high to mid -1
            else {
                high = mid - 1;
            }
        }
        return index;
    }




